@using MicroBlogger.ClientApp.Services.Posts
@inject PostServiceProxy PostServiceProxy
@if(dto.Items?.Count()>0)
{
    foreach(var post in dto.Items)
    {
                <MudCard Outlined="true">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary">@post.CreatedBy</MudAvatar>
                </CardHeaderAvatar>
                       <CardHeaderContent>
                            <MudText Typo="Typo.body1">@post.CreatedBy</MudText>
                            
                            <MudText Typo="Typo.body3">@post.Created</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                        <MudText Typo="Typo.body1">@(post.Message)</MudText>
                <br/>
                         <br/>
                @if (!string.IsNullOrEmpty(post.TempImageUrl) || !string.IsNullOrEmpty(post.TempImageUrl))
                {
                    <MudImage ObjectFit="ObjectFit.None" ObjectPosition="@ObjectPosition.Center" Height="500" Width="500" Src="@(string.IsNullOrEmpty(post.ImageUrl)? post.TempImageUrl:post.ImageUrl)" Elevation="25" Class="rounded-lg" />
                }
                              
            </MudCardContent>

        </MudCard>
        <br/>
        <br/>
    }
}
@code {
    private PaginatedResultOfPostsDto dto = new();

    protected override async Task OnInitializedAsync()
    {
              
        var query = new PostsWithPaginationQuery();
        query.PageNumber = 0;
        query.PageSize = 200;
        query.Keywords = "";
        query.OrderBy =  "Created";
        query.SortDirection = SortDirection.Descending.ToString();

        var result =  await PostServiceProxy.GetPaginatedProductsAsync(query);
        dto = result;
        foreach(var post in dto.Items)
        {
            //await  ApiClient.Posts.[post.CreatedBy]
        }
        StateHasChanged();

    }
}
